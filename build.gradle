buildscript {
    ext {
        springBootVersion = '1.2.5.RELEASE'
    }
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }

    }
    dependencies {
        //classpath('com.github.jengelman.gradle.plugins:gradle-processes:0.3.0')
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        //classpath 'au.com.dius:pact-jvm-provider-gradle_2.11:2.1.13'
        classpath 'io.codearte.accurest:accurest-gradle-plugin:0.8.1'
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }

    task loadVersion {
        ext.myVersion = new File('number').text.trim()
    }

    task manifestFilter(type: Copy) {
        from 'manifest.yml'
        into 'versioned-manifest'
        expand(version: "${loadVersion.myVersion}")
    }

}

subprojects {
    apply plugin: 'spring-boot'
    apply plugin: 'groovy'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        testCompile("org.springframework.boot:spring-boot-starter-test")

        //testCompile("au.com.dius:pact-jvm-consumer-junit_2.11:2.1.13")
    }

}

project(':microservices-pact-consumer') {
    jar {
        baseName = 'microservices-pact-consumer'
    }

    jar.doFirst {
        version = new File('number').text.trim()
    }
}


project(':microservices-pact-provider') {
    apply plugin: 'groovy'
    apply plugin: 'accurest'

    accurest {
        testMode = 'MockMvc'
        baseClassForTests = 'io.pivotal.microservices.pact.provider.BaseMockMvcSpec'
        basePackageForTests = 'io.pivotal.microservices.pact.provider'
        contractsDslDir = new File("$projectDir/src/test/resources/stubs")
        //stubsOutputDir = new File("${project.buildDir}/production/${project.name}-stubs/mappings/")
        stubsOutputDir = file("${project.buildDir}/generated-sources/accurest-stubs")
    }

    dependencies {
        testCompile 'io.codearte.accurest:accurest-core:0.8.1'
        testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
        testCompile 'com.jayway.restassured:rest-assured:2.4.0'
        testCompile 'com.jayway.restassured:spring-mock-mvc:2.4.0' // needed if you're going to use Spring MockMvc
    }
    test.dependsOn { [generateAccurest, generateWireMockClientStubs] } //See: https://github.com/Codearte/accurest/issues/36
    /*apply plugin: 'au.com.dius.pact'
    apply plugin: 'com.github.johnrengelman.processes'

    ext {
        pactFilePath = "$System.env.PACT_FILE"
    }

    task startProvider(type: com.github.jengelman.gradle.plugins.processes.tasks.JavaFork) {
        classpath = files("microservices-pact-provider/build/libs/microservices-pact-provider-${version}.jar")
        classpath += sourceSets.main.runtimeClasspath
        main = 'io.pivotal.microservices.pact.provider.Application'
        doLast {
            Thread.sleep(10000)
        }
    }

    task stopProvider << {
        startProvider.processHandle.abort()
    }*/

    jar {
        baseName = 'microservices-pact-provider'
    }

    jar.doFirst {
        version = new File('number').text.trim()
    }

    /*pact {
        serviceProviders {
            fooProvider {
                startProviderTask = 'startProvider'
                terminateProviderTask = 'stopProvider'
                hasPactWith('fooConsumer') {
                    pactFile = file(pactFilePath)
                }
            }
        }
    }*/
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}
